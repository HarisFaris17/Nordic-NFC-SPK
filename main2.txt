/**
 * Copyright (c) 2014 - 2021, Nordic Semiconductor ASA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 *
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/** @file
*
* @defgroup nrf_dev_button_radio_tx_example_main main.c
* @{
* @ingroup nrf_dev_button_radio_tx_example
*
* @brief Radio Transceiver Example Application main file.
*
* This file contains the source code for a sample application using the NRF_RADIO peripheral.
*
*/

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
//#include "nrf52833.h"
#include "radio_config.h"
#include "nrf_gpio.h"
#include "app_timer.h"
#include "app_button.h"
#include "boards.h"
#include "bsp.h"
#include "nordic_common.h"
#include "nrf_error.h"

#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"

#include "nrf_delay.h"

#include "comp.h"

static uint32_t                   packet;                    /**< Packet to transmit. */
static uint8_t                    payload[PAYLOAD_LENGTH];
static bool                       active_send_packet = false;
//static uint8_t                    

/**@brief Function for sending packet.
 */
void send_packet(uint32_t freq)
{
    // send the packet:
    //NRF_RADIO->FREQUENCY = ADV_CHANNEL_37;
    NRF_LOG_INFO("Set enable");
    NRF_RADIO->FREQUENCY = freq;
    NRF_RADIO->EVENTS_READY = 0U;
    NRF_RADIO->EVENTS_ADDRESS = 0U;
    NRF_RADIO->EVENTS_PAYLOAD = 0U;
    NRF_RADIO->EVENTS_END = 0;
    NRF_RADIO->EVENTS_DISABLED = 0;
    NRF_RADIO->TASKS_TXEN   = 1;

    while (NRF_RADIO->EVENTS_READY == 0U)
    {
        // wait
    }
    NRF_LOG_INFO("Events Ready 1");

    //NRF_RADIO->EVENTS_END  = 0U;
    //NRF_RADIO->TASKS_START = 1U;

    while (NRF_RADIO->EVENTS_ADDRESS == 0U);

    NRF_LOG_INFO("Events address");

    while (NRF_RADIO->EVENTS_PAYLOAD == 0U);

    NRF_LOG_INFO("Events payload");
    NRF_LOG_INFO("PDU Stat 0x%X",NRF_RADIO->PDUSTAT);

    while (NRF_RADIO->EVENTS_END == 0U)
    {
        // wait
    }

    for (int i = 0; i < 9; i++)
    {
        __NOP();
    }
    //NRF_LOG_INFO("Events End 1");
    //nrf_delay_ms(10);

    //NRF_RADIO->FREQUENCY = 26;
    //NRF_RADIO->EVENTS_END  = 0U;
    //NRF_RADIO->EVENTS_ADDRESS = 0U;
    //NRF_RADIO->EVENTS_PAYLOAD = 0U;
    //NRF_RADIO->TASKS_START = 1U;

    //NRF_LOG_INFO("Events Ready 2");

    //while (NRF_RADIO->EVENTS_ADDRESS == 0U);

    //NRF_LOG_INFO("Events address");

    //while (NRF_RADIO->EVENTS_PAYLOAD == 0U);

    //NRF_LOG_INFO("Events payload");

    //while (NRF_RADIO->EVENTS_END == 0U)
    //{
    //    // wait
    //}

    //nrf_delay_ms(10);

    //NRF_RADIO->FREQUENCY = 80;
    //NRF_RADIO->EVENTS_END  = 0U;
    //NRF_RADIO->EVENTS_ADDRESS = 0U;
    //NRF_RADIO->EVENTS_PAYLOAD = 0U;
    //NRF_RADIO->TASKS_START = 1U;

    //NRF_LOG_INFO("Events Ready 3");

    //while (NRF_RADIO->EVENTS_ADDRESS == 0U);

    //NRF_LOG_INFO("Events address");

    //while (NRF_RADIO->EVENTS_PAYLOAD == 0U);

    //NRF_LOG_INFO("Events payload");

    //while (NRF_RADIO->EVENTS_END == 0U)
    //{
    //    // wait
    //}

    //uint32_t err_code = bsp_indication_set(BSP_INDICATE_SENT_OK);
    NRF_LOG_INFO("The packet was sent");
    //APP_ERROR_CHECK(err_code);

    //NRF_RADIO->EVENTS_DISABLED = 0U;
    //// Disable radio
    //NRF_RADIO->TASKS_DISABLE = 1U;

    //while (NRF_RADIO->EVENTS_DISABLED == 0U)
    //{
    //    // wait
    //}
}

void fill_packet()
{
    payload[0] = 0b00000010;  // S0, it is occupy 1 byte, it is representing the pdutype, txadd, rxadd
    payload[1] = 0b00100101;  // representing LENGTH field the Payload contains 6 bytes advA and 31 bytes advData. hence total is 37

    uint32_t addr1_32t = NRF_FICR->DEVICEADDR[0];
    uint32_t addr2_32t = NRF_FICR->DEVICEADDR[1];

    uint8_t addr1[4] ;//= NRF_FICR->DEVICEADDR[0];
    uint8_t addr2[4] ;//= (NRF_FICR->DEVICEADDR[1]);

    memcpy(addr1, &addr1_32t, 4);
    memcpy(addr2, &addr2_32t, 4);

    NRF_LOG_HEXDUMP_INFO(addr1, 4);
    NRF_LOG_HEXDUMP_INFO(addr2, 2);

    uint8_t mask_change_to_static = 0xC0;
    addr2[1] = addr2[1] | mask_change_to_static;
    NRF_LOG_INFO("After Changed");

    NRF_LOG_HEXDUMP_INFO(addr2, 2);

    memcpy(&(payload[2]), addr1, 4);
    memcpy(&(payload[6]), addr2, 2);

    uint8_t flags_section[3] = {0x02, 0x01, 0x06};

    memcpy(&(payload[8]), flags_section, 3);

    uint8_t manuf_section[] = {0x1B, 0XFF, 0x06, 0x39, 0xCA, 0xFB, 0x01, 0x14, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x58, 0xEC, 0x98, 0xF7, 0xDF, 0xFC};
    memcpy(&(payload[11]), manuf_section, sizeof(manuf_section));

    NRF_LOG_HEXDUMP_INFO(payload, PAYLOAD_LENGTH);


}


/**@brief Function for handling bsp events.
 */
void bsp_evt_handler(bsp_event_t evt)
{
    printf("Button Handler");
    uint32_t prep_packet = 0;
    switch (evt)
    {
        case BSP_EVENT_KEY_0:
            /* Fall through. */
        case BSP_EVENT_KEY_1:
            /* Fall through. */
        case BSP_EVENT_KEY_2:
            /* Fall through. */
        case BSP_EVENT_KEY_3:
            /* Fall through. */
        case BSP_EVENT_KEY_4:
            /* Fall through. */
        case BSP_EVENT_KEY_5:
            /* Fall through. */
        case BSP_EVENT_KEY_6:
            /* Fall through. */
        case BSP_EVENT_KEY_7:
            /* Get actual button state. */
            for (int i = 0; i < BUTTONS_NUMBER; i++)
            {
                prep_packet |= (bsp_board_button_state_get(i) ? (1 << i) : 0);
            }
            break;
        default:
            /* No implementation needed. */
            break;
    }
    packet = prep_packet;
}

static void button_event_handler(uint8_t pin_no, uint8_t button_action)
{
    //NRF_LOG_INFO("Button pin no %d", pin_no);
    printf("Button pin no %d", pin_no);
    if (button_action != APP_BUTTON_PUSH)
    {
        //NRF_LOG_INFO("BUtton pulled");
        return;
    }
    
    active_send_packet = (active_send_packet ? false : true);
    
}


/**@brief Function for initialization oscillators.
 */
void clock_initialization()
{
    /* Start 16 MHz crystal oscillator */
    NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    NRF_CLOCK->TASKS_HFCLKSTART    = 1;

    /* Wait for the external oscillator to start up */
    while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0)
    {
        // Do nothing.
    }

    /* Start low frequency crystal oscillator for app_timer(used by bsp)*/
    NRF_CLOCK->LFCLKSRC            = (CLOCK_LFCLKSRC_SRC_Xtal << CLOCK_LFCLKSRC_SRC_Pos);
    NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    NRF_CLOCK->TASKS_LFCLKSTART    = 1;

    while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0)
    {
        // Do nothing.
    }
}

void button_initialization()
{
    ret_code_t err;
    app_button_cfg_t button = {.active_state = APP_BUTTON_ACTIVE_LOW,
                                .button_handler = button_event_handler,
                                .pin_no = 15,
                                .pull_cfg = NRF_GPIO_PIN_PULLUP};
    static app_button_cfg_t button_cfg[] = {
                                      {
                                      .pin_no = 15,
                                      .active_state = APP_BUTTON_ACTIVE_LOW,
                                      .pull_cfg = NRF_GPIO_PIN_PULLUP,
                                      .button_handler = button_event_handler
                                      }
    };
    uint8_t num_btn = sizeof(button_cfg)/sizeof(app_button_cfg_t);
    NRF_LOG_INFO("Number of button that wanted to be configured %d", num_btn);
    err = app_button_init(button_cfg, num_btn, APP_TIMER_TICKS(50));
    APP_ERROR_CHECK(err);

    err = app_button_enable();
    APP_ERROR_CHECK(err);

}


/**
 * @brief Function for application main entry.
 * @return 0. int return type required by ANSI/ISO standard.
 */
int main(void)
{
    uint32_t err_code = NRF_SUCCESS;

    clock_initialization();

    err_code = app_timer_init();
    APP_ERROR_CHECK(err_code);

    err_code = NRF_LOG_INIT(NULL);
    APP_ERROR_CHECK(err_code);

    NRF_LOG_DEFAULT_BACKENDS_INIT();
    //NRF_LOG_INFO("HAHAHA");

    

    uint32_t addr1 = NRF_FICR->DEVICEADDR[0];
    uint32_t addr2 = (NRF_FICR->DEVICEADDR[1]);

    uint32_t deviceid = NRF_FICR->DEVICEID[0];
    uint32_t deviceid2 = NRF_FICR->DEVICEID[1];
    uint32_t type = NRF_FICR->DEVICEADDRTYPE;
    NRF_LOG_INFO("0x%X 0x%X %d", addr2, addr1, type);
    printf("0x%X 0x%X %d\n", addr2, addr1, (type & BIT_0));
    printf("0x%X 0x%X\n", deviceid2, deviceid);

    //err_code = bsp_init(BSP_INIT_LEDS | BSP_INIT_BUTTONS, bsp_evt_handler);
    //APP_ERROR_CHECK(err_code);

    button_initialization();
    NRF_LOG_INFO("Button configured");

        NRF_LOG_INFO("Fill packet");
    fill_packet();

    // Set radio configuration parameters
    radio_configure();



    // Set payload pointer
    NRF_RADIO->PACKETPTR = (uint32_t)(&(payload[0]));

    NRF_LOG_HEXDUMP_INFO(NRF_RADIO->PACKETPTR, PAYLOAD_LENGTH);
    NRF_LOG_INFO("Access address");
    NRF_LOG_HEXDUMP_INFO(&(NRF_RADIO->BASE0), 4);
    NRF_LOG_HEXDUMP_INFO(&(NRF_RADIO->PREFIX0), 4);

    //NRF_RADIO->DEFMODE = 0x03;

    err_code = bsp_indication_set(BSP_INDICATE_USER_STATE_OFF);
    NRF_LOG_INFO("Starting in NRF52833");
    NRF_LOG_INFO("Radio transmitter example started.");
    NRF_LOG_INFO("Press Any Button");
    APP_ERROR_CHECK(err_code);
    int i = 0;
    while (true)
    {
        packet = i;
        if (active_send_packet)
        {
            send_packet(2);
            send_packet(26);
            send_packet(80);
            printf("The contents of the package was %u", (unsigned int)packet);
            NRF_LOG_INFO("The contents of the package was %u", (unsigned int)packet);
            packet = 0;
        }
        else 
        {
            NRF_LOG_INFO("Enter wait for event");
            __WFE();
        }
        //__WFE();
        
        i++;
        nrf_delay_ms(100);
    }
}


/**
 *@}
 **/
